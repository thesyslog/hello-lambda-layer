import json
from bson import ObjectId
from pvutils.utils import (
    MethodNotAllowedException,
    MissingParentIdException,
    UtilsAPI,
    ResourceNotFoundException,
    UserException,
    get_user,
    get_boundary
)


class APIEmbed(UtilsAPI):
    """
    https://docs.mongodb.com/manual/reference/operator/update/positional-filtered/
    As the arra_filter Array Update Operators are not supported in mongo
    we have to do some mannualy process
    """

    def __init__(self, model=None, event=None):
        self.model = model
        self.event = event
        self.user = get_user(event)
        if not self.user:
            raise UserException("Invalid user")
        self.model.user = self.user

    def handle_request(self, path):
        """
        handle a default request
        """
        parent_id = None
        if self.event["pathParameters"]:
            path_parameter_id = self.model.get_parent_id_field()
            parent_id = self.event["pathParameters"].get(path_parameter_id)
        if parent_id:
            if self.event["httpMethod"] == "POST":
                data = self.event["body"]
                return self.create(parent_id=parent_id, data=data, path=path)
            elif self.event["httpMethod"] == "PUT":
                data = self.event["body"]
                return self.update(parent_id=parent_id, data=data, path=path)
            elif self.event["httpMethod"] == "DELETE":
                return self.delete(parent_id=parent_id, path=path)
            else:
                raise MethodNotAllowedException("Method not allowed")
        else:
            raise MissingParentIdException("Parent id not present")

    def create(self, parent_id=None, data=None, path=None):
        try:
            # self.__check_permissions()
            parent_id = ObjectId(parent_id)
            query = {"_id": parent_id}
            get_boundary(self.user, query)
            data = json.loads(data)
            entity = self.model.create_embed(query=query, data=data, path=path)
            return self.success_response(
                status_code=201, data={"result": entity}
            )
        except:
            raise

    def update(self, parent_id=None, data=None, path=None):
        """
        """
        try:
            # self.__check_permissions()
            query = {"_id": ObjectId(parent_id)}
            get_boundary(self.user, query)
            data = json.loads(data)
            entity = self.model.update_embed(query=query, data=data, path=path)
            return self.success_response(
                status_code=200, data={"result": entity}
            )
        except:
            raise

    def delete(self, parent_id=None, _id=None, path=None):
        """
        """
        try:
            # self.__check_permissions()
            criteria = {"_id": ObjectId(parent_id)}
            get_boundary(self.user, criteria)
            entity = self.model.delete_embed(criteria=criteria, path=path)
            return self.success_response(
                status_code=200, data={"result": entity}
            )
        except:
            raise
